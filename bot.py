import asyncio
from telethon import TelegramClient, events
from binance.client import Client as BinanceClient
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
api_id = os.getenv('TELEGRAM_API_ID')
api_hash = os.getenv('TELEGRAM_API_HASH')
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Binance
binance_api_key = os.getenv('BINANCE_API_KEY')
binance_api_secret = os.getenv('BINANCE_API_SECRET')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = TelegramClient('bot', api_id, 
api_hash).start(bot_token=bot_token)
binance_client = BinanceClient(binance_api_key, binance_api_secret)

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
signals = []

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
admin_channels = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def get_admin_channels():
    async for dialog in client.iter_dialogs():
        if dialog.is_channel:
            try:
                participant = await client.get_permissions(dialog, 
client.get_me())
                if participant.is_admin:
                    admin_channels[dialog.id] = dialog.title
            except Exception as e:
                print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ 
{dialog.title}: {str(e)}')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    user_id = event.sender_id
    await get_admin_channels()
    
    if admin_channels:
        channels_list = "\n".join([f"{title} (ID: {channel_id})" for 
channel_id, title in admin_channels.items()])
        await event.respond(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è 
—Ä–∞–±–æ—Ç—ã:\n{channels_list}\n\n–í–≤–µ–¥–∏—Ç–µ /signal <SYMBOL> <ACTION> <LEVERAGE> 
<RM>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª.")
    else:
        await event.respond("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º 
–∫–∞–Ω–∞–ª–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /signal
@client.on(events.NewMessage(pattern='/signal'))
async def signal(event):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        message = event.message.text.split()
        symbol = message[1].upper()
        action = message[2].upper()  # BUY –∏–ª–∏ SELL
        leverage = message[3]  # x20 –ö–†–û–°–°
        rm = message[4]  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
        current_price = 
float(binance_client.get_symbol_ticker(symbol=symbol)['price'])

        # –†–∞—Å—á–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        entry_min = current_price * 0.995  # -0.5%
        entry_max = current_price * 1.005  # +0.5%
        entry_range = f"{entry_min:.2f} - {entry_max:.2f}"

        # –†–∞—Å—á–µ—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        if action == 'BUY':
            take_profit = current_price * 1.025  # +2.5% –¥–ª—è –ª–æ–Ω–≥–∞
            action_emoji = '‚¨ÜÔ∏è'
        elif action == 'SELL':
            take_profit = current_price * 0.975  # -2.5% –¥–ª—è —à–æ—Ä—Ç–∞
            action_emoji = '‚¨áÔ∏è'
        else:
            await event.respond('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ BUY 
–∏–ª–∏ SELL.')
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        signal_message = (
            f"{symbol}\n"
            f"{action}{action_emoji}\n\n"
            f"üîë –í—Ö–æ–¥—ã: {entry_range}\n"
            f"üíµ –ü–ª–µ—á–æ: {leverage}\n"
            f"‚ùóÔ∏è –†–ú: {rm}\n"
            f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_profit:.2f}"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è 
–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        for channel_id in admin_channels.keys():
            sent_message = await client.send_message(channel_id, 
signal_message)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            signals.append({
                'symbol': symbol,
                'action': action,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ check_prices
                'take_profit': take_profit,
                'message_id': sent_message.id,
                'channel_id': channel_id
            })

        await event.respond('–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è 
–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!')
    except Exception as e:
        await event.respond(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_prices():
    while True:
        for signal in signals:
            symbol = signal['symbol']
            take_profit = signal['take_profit']
            message_id = signal['message_id']
            channel_id = signal['channel_id']

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            current_price = 
float(binance_client.get_symbol_ticker(symbol=symbol)['price'])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ —Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            if (signal['action'] == 'BUY' and current_price >= 
take_profit) –∏–ª–∏ (signal['action'] == 'SELL' and current_price <= 
take_profit):
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª —Å —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–∏–≥–Ω–∞–ª
                await client.send_message(channel_id, f'–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ 
–¥–ª—è {symbol}!', reply_to=message_id)
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                signals.remove(signal)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(10)

# –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
client.loop.create_task(check_prices())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.start()
client.run_until_disconnected()

